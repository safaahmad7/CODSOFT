<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Tic Tac Toe â€” Play</title>
<style>
  :root{
    --bg1:#0f1724;
    --bg2:#13233b;
    --card:#0b1220;
    --accent:#6dd3ff;
    --x-color:#ff7b7b;
    --o-color:#7bd3ff;
    --glass: rgba(255,255,255,0.03);
    --muted: #9aa7bd;
  }

  html,body{
    height:100%;
    margin:0;
    font-family: Inter, system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial;
    background: linear-gradient(135deg,var(--bg1),var(--bg2));
    color:#e6eef8;
    display:flex;
    align-items:center;
    justify-content:center;
  }

  .app{
    width: 380px;
    background: linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
    border-radius:14px;
    padding:20px;
    box-shadow: 0 8px 30px rgba(2,6,23,0.6), inset 0 1px 0 rgba(255,255,255,0.02);
    backdrop-filter: blur(6px);
  }

  header{
    display:flex;
    align-items:center;
    justify-content:space-between;
    gap:12px;
    margin-bottom:14px;
  }

  h1{
    font-size:18px;
    margin:0;
    letter-spacing:0.2px;
  }

  .controls{
    display:flex;
    gap:8px;
    align-items:center;
  }

  select, button {
    border-radius:10px;
    border:none;
    padding:8px 10px;
    background:var(--glass);
    color:var(--muted);
    cursor:pointer;
    font-size:13px;
  }

  button.primary{
    background: linear-gradient(90deg,var(--accent), #8abfff);
    color:#042433;
    font-weight:600;
    box-shadow: 0 6px 18px rgba(107,176,217,0.14);
  }

  .status{
    text-align:center;
    color:var(--muted);
    margin-bottom:14px;
    font-size:13px;
  }

  .board{
    display:grid;
    grid-template-columns: repeat(3,1fr);
    gap:10px;
    width:320px;
    margin:0 auto 14px;
  }

  .cell{
    background: linear-gradient(180deg, rgba(255,255,255,0.01), rgba(255,255,255,0.02));
    height:96px;
    border-radius:12px;
    display:flex;
    align-items:center;
    justify-content:center;
    font-size:42px;
    cursor:pointer;
    user-select:none;
    box-shadow: 0 6px 18px rgba(2,6,23,0.6), inset 0 2px 6px rgba(255,255,255,0.02);
    transition: transform 0.12s ease, box-shadow 0.12s ease;
  }

  .cell:hover { transform: translateY(-4px); box-shadow: 0 12px 28px rgba(2,6,23,0.7); }
  .cell.disabled{ cursor:default; opacity:0.9; transform:none; box-shadow: none; }

  .x { color: var(--x-color); font-weight:700; font-size:48px; }
  .o { color: var(--o-color); font-weight:700; font-size:48px; }

  .scores {
    display:flex;
    justify-content:space-between;
    gap:10px;
    font-size:13px;
    color:var(--muted);
  }

  .scores div { background: rgba(255,255,255,0.02); padding:8px 10px; border-radius:10px; width:48%; text-align:center; }

  .line {
    height:4px;
    border-radius:6px;
    margin-top:12px;
    background: linear-gradient(90deg, rgba(109,211,255,0.15), rgba(255,123,123,0.12));
  }

  footer { margin-top:12px; text-align:center; font-size:12px; color:var(--muted); }

  /* winning highlight animation */
  .winning {
    animation: winGlow 800ms infinite alternate;
  }
  @keyframes winGlow {
    from { box-shadow: 0 10px 28px rgba(255,255,255,0.03), 0 0 20px rgba(255,255,255,0.01); transform: scale(1); }
    to { box-shadow: 0 18px 48px rgba(0,0,0,0.6), 0 0 36px rgba(255,255,255,0.02); transform: scale(1.02); }
  }

  @media (max-width:420px){
    .app{ width:92%; padding:14px; }
    .board{ width:100%; gap:8px }
    .cell{ height:84px; font-size:40px }
  }
</style>
</head>
<body>
  <div class="app" role="application" aria-label="Tic Tac Toe Game">
    <header>
      <h1>Tic-Tac-Toe</h1>
      <div class="controls">
        <select id="mode-select" title="Choose mode">
          <option value="ai">Play vs Computer</option>
          <option value="local">Two players (local)</option>
        </select>
        <button id="reset" class="primary" title="Restart round">Restart</button>
      </div>
    </header>

    <div class="status" id="status">Player X's turn</div>

    <main>
      <div class="board" id="board" aria-live="polite">
        <!-- 9 cells generated by JS -->
      </div>

      <div class="scores">
        <div id="score-x">X: 0</div>
        <div id="score-o">O: 0</div>
      </div>

      <div class="line" aria-hidden="true"></div>

    </main>

    <footer>Tip: In vs Computer mode you play as <strong>X</strong>. Computer is <strong>O</strong>.</footer>
  </div>

<script>
/* Tic Tac Toe game with optional unbeatable AI (Minimax).
   - X always starts
   - mode 'ai' => player X (human) vs O (computer)
   - mode 'local' => two local human players alternating X and O
*/

const boardEl = document.getElementById('board');
const statusEl = document.getElementById('status');
const resetBtn = document.getElementById('reset');
const modeSelect = document.getElementById('mode-select');
const scoreXEl = document.getElementById('score-x');
const scoreOEl = document.getElementById('score-o');

let board = Array(9).fill(null); // null | 'X' | 'O'
let current = 'X';
let playing = true;
let scores = { X: 0, O: 0 };
let mode = modeSelect.value; // 'ai' or 'local'

// winning combinations
const wins = [
  [0,1,2],[3,4,5],[6,7,8],
  [0,3,6],[1,4,7],[2,5,8],
  [0,4,8],[2,4,6]
];

// create cells
function buildBoard(){
  boardEl.innerHTML = '';
  for(let i=0;i<9;i++){
    const cell = document.createElement('button');
    cell.className = 'cell';
    cell.dataset.index = i;
    cell.setAttribute('aria-label', `cell ${i+1}`);
    cell.addEventListener('click', onCellClick);
    boardEl.appendChild(cell);
  }
}
buildBoard();

function onCellClick(e){
  const idx = Number(e.currentTarget.dataset.index);
  if(!playing || board[idx]) return;
  playMove(idx, current);
}

function playMove(idx, player){
  board[idx] = player;
  renderCell(idx);
  const result = checkGameOver(board);
  if(result) return handleResult(result);
  // switch
  current = current === 'X' ? 'O' : 'X';
  updateStatus();
  if(mode === 'ai' && playing && current === 'O'){
    // small delay to feel natural
    setTimeout(() => aiMove(), 300);
  }
}

function renderCell(idx){
  const cell = boardEl.querySelector(`[data-index="${idx}"]`);
  if(!cell) return;
  cell.classList.add('disabled');
  const val = board[idx];
  cell.innerHTML = val ? `<span class="${val.toLowerCase()}">${val}</span>` : '';
}

function updateStatus(msg){
  if(msg) {
    statusEl.textContent = msg;
    return;
  }
  statusEl.textContent = playing ? `Player ${current}'s turn` : 'Game Over';
}

function checkGameOver(b){
  // returns { winner: 'X'|'O'|null, combo: [i,j,k] | null, tie: boolean } or null if not over
  for(const combo of wins){
    const [a,b1,c] = combo;
    if(b[a] && b[a] === b[b1] && b[a] === b[c]){
      return { winner: b[a], combo, tie: false };
    }
  }
  if(b.every(x => x !== null)){
    return { winner: null, combo: null, tie: true };
  }
  return null;
}

function handleResult(result){
  playing = false;
  if(result.tie){
    highlightCells(result.combo, true);
    updateStatus("It's a tie!");
  } else {
    const w = result.winner;
    updateStatus(`Player ${w} wins!`);
    scores[w] += 1;
    updateScores();
    highlightCells(result.combo);
  }
  // disable remaining cells
  boardEl.querySelectorAll('.cell').forEach(c => c.classList.add('disabled'));
}

function highlightCells(combo, isTie=false){
  if(!combo) return;
  for(const idx of combo){
    const el = boardEl.querySelector(`[data-index="${idx}"]`);
    if(el){
      el.classList.add('winning');
      if(isTie) el.style.opacity = 0.9;
    }
  }
}

function updateScores(){
  scoreXEl.textContent = `X: ${scores.X}`;
  scoreOEl.textContent = `O: ${scores.O}`;
}

function resetBoard(nextStarter = 'X'){
  board = Array(9).fill(null);
  current = nextStarter;
  playing = true;
  // rebuild to remove listeners duplicates (safe)
  buildBoard();
  updateStatus();
}

// simple AI using Minimax (unbeatable)
// AI is 'O', human is 'X'
function aiMove(){
  // If board empty, choose center for best start
  if(board.every(x => x === null)){
    playMove(4, 'O'); // center
    return;
  }
  const move = bestMove(board, 'O');
  if(move != null) playMove(move, 'O');
}

// Minimax implementation
function bestMove(bd, player){
  // returns the best index to move for 'player'
  const opponent = player === 'O' ? 'X' : 'O';
  // terminal checks
  const terminal = checkGameOver(bd);
  if(terminal){
    // no moves
    return null;
  }

  let bestScore = player === 'O' ? -Infinity : Infinity;
  let move = null;

  for(let i=0;i<9;i++){
    if(bd[i] === null){
      bd[i] = player;
      const score = minimax(bd, 0, false, player, opponent);
      bd[i] = null;

      if(player === 'O'){
        if(score > bestScore){ bestScore = score; move = i; }
      } else {
        if(score < bestScore){ bestScore = score; move = i; }
      }
    }
  }
  return move;
}

function minimax(bd, depth, isMaximizing, aiPlayer, human){
  const res = checkGameOver(bd);
  if(res){
    if(res.tie) return 0;
    if(res.winner === aiPlayer) return 10 - depth;
    if(res.winner === human) return depth - 10;
  }

  if(isMaximizing){
    let best = -Infinity;
    for(let i=0;i<9;i++){
      if(bd[i] === null){
        bd[i] = aiPlayer;
        const val = minimax(bd, depth+1, false, aiPlayer, human);
        bd[i] = null;
        best = Math.max(best, val);
      }
    }
    return best;
  } else {
    let best = Infinity;
    for(let i=0;i<9;i++){
      if(bd[i] === null){
        bd[i] = human;
        const val = minimax(bd, depth+1, true, aiPlayer, human);
        bd[i] = null;
        best = Math.min(best, val);
      }
    }
    return best;
  }
}

// wire up UI
resetBtn.addEventListener('click', () => {
  // restart round, next starter flips
  const next = current === 'X' ? 'O' : 'X';
  // clear any winning highlights & scores remain
  document.querySelectorAll('.cell').forEach(c => c.classList.remove('winning'));
  resetBoard(next);
});

modeSelect.addEventListener('change', (e) => {
  mode = e.target.value;
  // reset scores & board when changing mode
  scores = { X: 0, O: 0 };
  updateScores();
  document.querySelectorAll('.cell').forEach(c => c.classList.remove('winning'));
  resetBoard('X');
});

// initialize
resetBoard('X');
updateScores();

/* Accessibility: allow keyboard navigation on cells */
document.addEventListener('keydown', (e) => {
  // Enter triggers click on focused cell
  if(e.key === 'Enter' && document.activeElement && document.activeElement.classList.contains('cell')){
    document.activeElement.click();
  }
});
</script>
</body>
</html>
